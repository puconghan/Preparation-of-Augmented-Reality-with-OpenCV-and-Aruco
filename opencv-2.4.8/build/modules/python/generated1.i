{"Abs", pycvAbs, METH_VARARGS, "Abs(src, dst) -> None"},
{"AbsDiff", pycvAbsDiff, METH_VARARGS, "AbsDiff(src1, src2, dst) -> None"},
{"AbsDiffS", pycvAbsDiffS, METH_VARARGS, "AbsDiffS(src, dst, value) -> None"},
{"Acc", (PyCFunction)pycvAcc, METH_KEYWORDS, "Acc(image, sum [, mask]) -> None"},
{"AdaptiveThreshold", (PyCFunction)pycvAdaptiveThreshold, METH_KEYWORDS, "AdaptiveThreshold(src, dst, maxValue [, adaptive_method [, thresholdType [, blockSize [, param1]]]]) -> None"},
{"Add", (PyCFunction)pycvAdd, METH_KEYWORDS, "Add(src1, src2, dst [, mask]) -> None"},
{"AddS", (PyCFunction)pycvAddS, METH_KEYWORDS, "AddS(src, value, dst [, mask]) -> None"},
{"AddWeighted", pycvAddWeighted, METH_VARARGS, "AddWeighted(src1, alpha, src2, beta, gamma, dst) -> None"},
{"And", (PyCFunction)pycvAnd, METH_KEYWORDS, "And(src1, src2, dst [, mask]) -> None"},
{"AndS", (PyCFunction)pycvAndS, METH_KEYWORDS, "AndS(src, value, dst [, mask]) -> None"},
{"ApproxChains", (PyCFunction)pycvApproxChains, METH_KEYWORDS, "ApproxChains(src_seq, storage [, method [, parameter [, minimal_perimeter [, recursive]]]]) -> CvSeq*"},
{"ApproxPoly", (PyCFunction)pycvApproxPoly, METH_KEYWORDS, "ApproxPoly(src_seq, storage, method [, parameter [, parameter2]]) -> None"},
{"ArcLength", (PyCFunction)pycvArcLength, METH_KEYWORDS, "ArcLength(curve [, slice [, isClosed]]) -> double"},
{"Avg", (PyCFunction)pycvAvg, METH_KEYWORDS, "Avg(arr [, mask]) -> CvScalar"},
{"AvgSdv", (PyCFunction)pycvAvgSdv, METH_KEYWORDS, "AvgSdv(arr [, mask]) -> mean,stdDev"},
{"BackProjectPCA", pycvBackProjectPCA, METH_VARARGS, "BackProjectPCA(proj, avg, eigenvects, result) -> None"},
{"BoundingRect", (PyCFunction)pycvBoundingRect, METH_KEYWORDS, "BoundingRect(points [, update]) -> CvRect"},
{"BoxPoints", pycvBoxPoints, METH_VARARGS, "BoxPoints(box) -> points"},
{"CV_16SC", pycv_CV_16SC, METH_VARARGS, "CV_16SC(n) -> int"},
{"16SC", pycv_CV_16SC, METH_VARARGS, "CV_16SC(n) -> int"},
{"CV_16UC", pycv_CV_16UC, METH_VARARGS, "CV_16UC(n) -> int"},
{"16UC", pycv_CV_16UC, METH_VARARGS, "CV_16UC(n) -> int"},
{"CV_32FC", pycv_CV_32FC, METH_VARARGS, "CV_32FC(n) -> int"},
{"32FC", pycv_CV_32FC, METH_VARARGS, "CV_32FC(n) -> int"},
{"CV_32SC", pycv_CV_32SC, METH_VARARGS, "CV_32SC(n) -> int"},
{"32SC", pycv_CV_32SC, METH_VARARGS, "CV_32SC(n) -> int"},
{"CV_64FC", pycv_CV_64FC, METH_VARARGS, "CV_64FC(n) -> int"},
{"64FC", pycv_CV_64FC, METH_VARARGS, "CV_64FC(n) -> int"},
{"CV_8SC", pycv_CV_8SC, METH_VARARGS, "CV_8SC(n) -> int"},
{"8SC", pycv_CV_8SC, METH_VARARGS, "CV_8SC(n) -> int"},
{"CV_8UC", pycv_CV_8UC, METH_VARARGS, "CV_8UC(n) -> int"},
{"8UC", pycv_CV_8UC, METH_VARARGS, "CV_8UC(n) -> int"},
{"CV_CMP", pycv_CV_CMP, METH_VARARGS, "CV_CMP(a, b) -> int"},
{"CMP", pycv_CV_CMP, METH_VARARGS, "CV_CMP(a, b) -> int"},
{"CV_FOURCC", pycv_CV_FOURCC, METH_VARARGS, "CV_FOURCC(c1, c2, c3, c4) -> int"},
{"FOURCC", pycv_CV_FOURCC, METH_VARARGS, "CV_FOURCC(c1, c2, c3, c4) -> int"},
{"CV_IABS", pycv_CV_IABS, METH_VARARGS, "CV_IABS(a) -> int"},
{"IABS", pycv_CV_IABS, METH_VARARGS, "CV_IABS(a) -> int"},
{"CV_IS_SEQ_CLOSED", pycv_CV_IS_SEQ_CLOSED, METH_VARARGS, "CV_IS_SEQ_CLOSED(s) -> int"},
{"IS_SEQ_CLOSED", pycv_CV_IS_SEQ_CLOSED, METH_VARARGS, "CV_IS_SEQ_CLOSED(s) -> int"},
{"CV_IS_SEQ_CONVEX", pycv_CV_IS_SEQ_CONVEX, METH_VARARGS, "CV_IS_SEQ_CONVEX(s) -> int"},
{"IS_SEQ_CONVEX", pycv_CV_IS_SEQ_CONVEX, METH_VARARGS, "CV_IS_SEQ_CONVEX(s) -> int"},
{"CV_IS_SEQ_CURVE", pycv_CV_IS_SEQ_CURVE, METH_VARARGS, "CV_IS_SEQ_CURVE(s) -> int"},
{"IS_SEQ_CURVE", pycv_CV_IS_SEQ_CURVE, METH_VARARGS, "CV_IS_SEQ_CURVE(s) -> int"},
{"CV_IS_SEQ_HOLE", pycv_CV_IS_SEQ_HOLE, METH_VARARGS, "CV_IS_SEQ_HOLE(s) -> int"},
{"IS_SEQ_HOLE", pycv_CV_IS_SEQ_HOLE, METH_VARARGS, "CV_IS_SEQ_HOLE(s) -> int"},
{"CV_IS_SEQ_INDEX", pycv_CV_IS_SEQ_INDEX, METH_VARARGS, "CV_IS_SEQ_INDEX(s) -> int"},
{"IS_SEQ_INDEX", pycv_CV_IS_SEQ_INDEX, METH_VARARGS, "CV_IS_SEQ_INDEX(s) -> int"},
{"CV_IS_SEQ_SIMPLE", pycv_CV_IS_SEQ_SIMPLE, METH_VARARGS, "CV_IS_SEQ_SIMPLE(s) -> int"},
{"IS_SEQ_SIMPLE", pycv_CV_IS_SEQ_SIMPLE, METH_VARARGS, "CV_IS_SEQ_SIMPLE(s) -> int"},
{"CV_MAKETYPE", pycv_CV_MAKETYPE, METH_VARARGS, "CV_MAKETYPE(depth, cn) -> int"},
{"MAKETYPE", pycv_CV_MAKETYPE, METH_VARARGS, "CV_MAKETYPE(depth, cn) -> int"},
{"CV_MAT_CN", pycv_CV_MAT_CN, METH_VARARGS, "CV_MAT_CN(i) -> int"},
{"MAT_CN", pycv_CV_MAT_CN, METH_VARARGS, "CV_MAT_CN(i) -> int"},
{"CV_MAT_DEPTH", pycv_CV_MAT_DEPTH, METH_VARARGS, "CV_MAT_DEPTH(i) -> int"},
{"MAT_DEPTH", pycv_CV_MAT_DEPTH, METH_VARARGS, "CV_MAT_DEPTH(i) -> int"},
{"CV_RGB", pycv_CV_RGB, METH_VARARGS, "CV_RGB(red, grn, blu) -> CvScalar"},
{"RGB", pycv_CV_RGB, METH_VARARGS, "CV_RGB(red, grn, blu) -> CvScalar"},
{"CV_SIGN", pycv_CV_SIGN, METH_VARARGS, "CV_SIGN(a) -> int"},
{"SIGN", pycv_CV_SIGN, METH_VARARGS, "CV_SIGN(a) -> int"},
{"CalcArrBackProject", pycvCalcArrBackProject, METH_VARARGS, "CalcArrBackProject(image, back_project, hist) -> None"},
{"CalcArrHist", (PyCFunction)pycvCalcArrHist, METH_KEYWORDS, "CalcArrHist(image, hist [, accumulate [, mask]]) -> None"},
{"CalcBackProject", pycvCalcBackProject, METH_VARARGS, "CalcBackProject(image, back_project, hist) -> None"},
{"CalcBackProjectPatch", pycvCalcBackProjectPatch, METH_VARARGS, "CalcBackProjectPatch(images, dst, patch_size, hist, method, factor) -> None"},
{"CalcCovarMatrix", pycvCalcCovarMatrix, METH_VARARGS, "CalcCovarMatrix(vects, covMat, avg, flags) -> None"},
{"CalcEMD2", (PyCFunction)pycvCalcEMD2, METH_KEYWORDS, "CalcEMD2(signature1, signature2, distance_type [, distance_func [, cost_matrix [, flow [, lower_bound [, userdata]]]]]) -> float"},
{"CalcGlobalOrientation", pycvCalcGlobalOrientation, METH_VARARGS, "CalcGlobalOrientation(orientation, mask, mhi, timestamp, duration) -> double"},
{"CalcHist", (PyCFunction)pycvCalcHist, METH_KEYWORDS, "CalcHist(image, hist [, accumulate [, mask]]) -> None"},
{"CalcMotionGradient", (PyCFunction)pycvCalcMotionGradient, METH_KEYWORDS, "CalcMotionGradient(mhi, mask, orientation, delta1, delta2 [, apertureSize]) -> None"},
{"CalcOpticalFlowBM", pycvCalcOpticalFlowBM, METH_VARARGS, "CalcOpticalFlowBM(prev, curr, blockSize, shiftSize, max_range, usePrevious, velx, vely) -> None"},
{"CalcOpticalFlowFarneback", (PyCFunction)pycvCalcOpticalFlowFarneback, METH_KEYWORDS, "CalcOpticalFlowFarneback(prev, curr, flow [, pyr_scale [, levels [, winsize [, iterations [, poly_n [, poly_sigma [, flags]]]]]]]) -> None"},
{"CalcOpticalFlowHS", pycvCalcOpticalFlowHS, METH_VARARGS, "CalcOpticalFlowHS(prev, curr, usePrevious, velx, vely, lambda, criteria) -> None"},
{"CalcOpticalFlowLK", pycvCalcOpticalFlowLK, METH_VARARGS, "CalcOpticalFlowLK(prev, curr, winSize, velx, vely) -> None"},
{"CalcOpticalFlowPyrLK", (PyCFunction)pycvCalcOpticalFlowPyrLK, METH_KEYWORDS, "CalcOpticalFlowPyrLK(prev, curr, prevPyr, currPyr, prevFeatures, winSize, level, criteria, flags [, guesses]) -> currFeatures,status,track_error"},
{"CalcPCA", pycvCalcPCA, METH_VARARGS, "CalcPCA(data, avg, eigenvalues, eigenvectors, flags) -> None"},
{"CalcProbDensity", (PyCFunction)pycvCalcProbDensity, METH_KEYWORDS, "CalcProbDensity(hist1, hist2, dst_hist [, scale]) -> None"},
{"CalcSubdivVoronoi2D", pycvCalcSubdivVoronoi2D, METH_VARARGS, "CalcSubdivVoronoi2D(subdiv) -> None"},
{"CalibrateCamera2", (PyCFunction)pycvCalibrateCamera2, METH_KEYWORDS, "CalibrateCamera2(objectPoints, imagePoints, pointCounts, imageSize, cameraMatrix, distCoeffs, rvecs, tvecs [, flags]) -> None"},
{"CalibrationMatrixValues", (PyCFunction)pycvCalibrationMatrixValues, METH_KEYWORDS, "CalibrationMatrixValues(calibMatr, image_size [, apertureWidth [, apertureHeight]]) -> fovx,fovy,focalLength,principalPoint,pixelAspectRatio"},
{"CamShift", pycvCamShift, METH_VARARGS, "CamShift(prob_image, window, criteria) -> int,comp,box"},
{"Canny", (PyCFunction)pycvCanny, METH_KEYWORDS, "Canny(image, edges, threshold1, threshold2 [, aperture_size]) -> None"},
{"CaptureFromCAM", pycvCaptureFromCAM, METH_VARARGS, "CaptureFromCAM(index) -> CvCapture*"},
{"CaptureFromFile", pycvCaptureFromFile, METH_VARARGS, "CaptureFromFile(filename) -> CvCapture*"},
{"CartToPolar", (PyCFunction)pycvCartToPolar, METH_KEYWORDS, "CartToPolar(x, y, magnitude [, angle [, angleInDegrees]]) -> None"},
{"Cbrt", pycvCbrt, METH_VARARGS, "Cbrt(value) -> float"},
{"Ceil", pycvCeil, METH_VARARGS, "Ceil(value) -> int"},
{"CheckArr", (PyCFunction)pycvCheckArr, METH_KEYWORDS, "CheckArr(arr [, flags [, min_val [, max_val]]]) -> int"},
{"CheckContourConvexity", pycvCheckContourConvexity, METH_VARARGS, "CheckContourConvexity(contour) -> int"},
{"Circle", (PyCFunction)pycvCircle, METH_KEYWORDS, "Circle(img, center, radius, color [, thickness [, lineType [, shift]]]) -> None"},
{"ClearHist", pycvClearHist, METH_VARARGS, "ClearHist(hist) -> None"},
{"ClearND", pycvClearND, METH_VARARGS, "ClearND(arr, idx) -> None"},
{"ClearSeq", pycvClearSeq, METH_VARARGS, "ClearSeq(seq) -> None"},
{"ClearSubdivVoronoi2D", pycvClearSubdivVoronoi2D, METH_VARARGS, "ClearSubdivVoronoi2D(subdiv) -> None"},
{"ClipLine", pycvClipLine, METH_VARARGS, "ClipLine(imgSize, pt1, pt2) -> point1,point2"},
{"CloneImage", pycvCloneImage, METH_VARARGS, "CloneImage(image) -> IplImage*"},
{"CloneMat", pycvCloneMat, METH_VARARGS, "CloneMat(mat) -> CvMat*"},
{"CloneMatND", pycvCloneMatND, METH_VARARGS, "CloneMatND(mat) -> CvMatND*"},
{"CloneSeq", pycvCloneSeq, METH_VARARGS, "CloneSeq(seq, storage) -> None"},
{"Cmp", pycvCmp, METH_VARARGS, "Cmp(src1, src2, dst, cmpOp) -> None"},
{"CmpS", pycvCmpS, METH_VARARGS, "CmpS(src, value, dst, cmpOp) -> None"},
{"CompareHist", pycvCompareHist, METH_VARARGS, "CompareHist(hist1, hist2, method) -> double"},
{"ComputeCorrespondEpilines", pycvComputeCorrespondEpilines, METH_VARARGS, "ComputeCorrespondEpilines(points, whichImage, F, lines) -> None"},
{"ContourArea", (PyCFunction)pycvContourArea, METH_KEYWORDS, "ContourArea(contour [, slice]) -> double"},
{"Convert", pycvConvert, METH_VARARGS, "Convert(src, dst) -> None"},
{"ConvertImage", (PyCFunction)pycvConvertImage, METH_KEYWORDS, "ConvertImage(src, dst [, flags]) -> None"},
{"ConvertMaps", pycvConvertMaps, METH_VARARGS, "ConvertMaps(mapx, mapy, mapxy, mapalpha) -> None"},
{"ConvertPointsHomogeneous", pycvConvertPointsHomogeneous, METH_VARARGS, "ConvertPointsHomogeneous(src, dst) -> None"},
{"ConvertScale", (PyCFunction)pycvConvertScale, METH_KEYWORDS, "ConvertScale(src, dst [, scale [, shift]]) -> None"},
{"ConvertScaleAbs", (PyCFunction)pycvConvertScaleAbs, METH_KEYWORDS, "ConvertScaleAbs(src, dst [, scale [, shift]]) -> None"},
{"ConvexHull2", (PyCFunction)pycvConvexHull2, METH_KEYWORDS, "ConvexHull2(points, storage [, orientation [, return_points]]) -> CvSeq*"},
{"ConvexityDefects", pycvConvexityDefects, METH_VARARGS, "ConvexityDefects(contour, convexhull, storage) -> CvSeqOfCvConvexityDefect*"},
{"Copy", (PyCFunction)pycvCopy, METH_KEYWORDS, "Copy(src, dst [, mask]) -> None"},
{"CopyMakeBorder", (PyCFunction)pycvCopyMakeBorder, METH_KEYWORDS, "CopyMakeBorder(src, dst, offset, bordertype [, value]) -> None"},
{"CornerEigenValsAndVecs", (PyCFunction)pycvCornerEigenValsAndVecs, METH_KEYWORDS, "CornerEigenValsAndVecs(image, eigenvv, blockSize [, aperture_size]) -> None"},
{"CornerHarris", (PyCFunction)pycvCornerHarris, METH_KEYWORDS, "CornerHarris(image, harris_dst, blockSize [, aperture_size [, k]]) -> None"},
{"CornerMinEigenVal", (PyCFunction)pycvCornerMinEigenVal, METH_KEYWORDS, "CornerMinEigenVal(image, eigenval, blockSize [, aperture_size]) -> None"},
{"CountNonZero", pycvCountNonZero, METH_VARARGS, "CountNonZero(arr) -> int"},
{"CreateCameraCapture", pycvCreateCameraCapture, METH_VARARGS, "CreateCameraCapture(index) -> CvCapture*"},
{"CreateData", pycvCreateData, METH_VARARGS, "CreateData(arr) -> None"},
{"CreateFileCapture", pycvCreateFileCapture, METH_VARARGS, "CreateFileCapture(filename) -> CvCapture*"},
{"CreateHist", (PyCFunction)pycvCreateHist, METH_KEYWORDS, "CreateHist(dims, type [, ranges [, uniform]]) -> CvHistogram"},
{"CreateImage", pycvCreateImage, METH_VARARGS, "CreateImage(size, depth, channels) -> IplImage*"},
{"CreateImageHeader", pycvCreateImageHeader, METH_VARARGS, "CreateImageHeader(size, depth, channels) -> IplImage*"},
{"CreateKalman", (PyCFunction)pycvCreateKalman, METH_KEYWORDS, "CreateKalman(dynam_params, measure_params [, control_params]) -> CvKalman*"},
{"CreateMat", pycvCreateMat, METH_VARARGS, "CreateMat(rows, cols, type) -> CvMat"},
{"CreateMatHeader", pycvCreateMatHeader, METH_VARARGS, "CreateMatHeader(rows, cols, type) -> CvMat"},
{"CreateMatND", pycvCreateMatND, METH_VARARGS, "CreateMatND(dims, type) -> CvMatND"},
{"CreateMatNDHeader", pycvCreateMatNDHeader, METH_VARARGS, "CreateMatNDHeader(dims, type) -> CvMatND"},
{"CreateMemStorage", (PyCFunction)pycvCreateMemStorage, METH_KEYWORDS, "CreateMemStorage( [, blockSize]) -> CvMemStorage"},
{"CreatePOSITObject", pycvCreatePOSITObject, METH_VARARGS, "CreatePOSITObject(points) -> CvPOSITObject*"},
{"CreateStereoBMState", (PyCFunction)pycvCreateStereoBMState, METH_KEYWORDS, "CreateStereoBMState( [, preset [, numberOfDisparities]]) -> CvStereoBMState*"},
{"CreateStereoGCState", pycvCreateStereoGCState, METH_VARARGS, "CreateStereoGCState(numberOfDisparities, maxIters) -> CvStereoGCState*"},
{"CreateStructuringElementEx", (PyCFunction)pycvCreateStructuringElementEx, METH_KEYWORDS, "CreateStructuringElementEx(cols, rows, anchorX, anchorY, shape [, values]) -> IplConvKernel*"},
{"CreateSubdivDelaunay2D", pycvCreateSubdivDelaunay2D, METH_VARARGS, "CreateSubdivDelaunay2D(rect, storage) -> CvSubdiv2D*"},
{"CreateTrackbar", pycvCreateTrackbar, METH_VARARGS, "CreateTrackbar(trackbarName, windowName, value, count, onChange) -> None"},
{"CreateVideoWriter", (PyCFunction)pycvCreateVideoWriter, METH_KEYWORDS, "CreateVideoWriter(filename, fourcc, fps, frame_size [, is_color]) -> CvVideoWriter*"},
{"CrossProduct", pycvCrossProduct, METH_VARARGS, "CrossProduct(src1, src2, dst) -> None"},
{"CvtColor", pycvCvtColor, METH_VARARGS, "CvtColor(src, dst, code) -> None"},
{"CvtPixToPlane", pycvCvtPixToPlane, METH_VARARGS, "CvtPixToPlane(src, dst0, dst1, dst2, dst3) -> None"},
{"CvtScale", (PyCFunction)pycvCvtScale, METH_KEYWORDS, "CvtScale(src, dst [, scale [, shift]]) -> None"},
{"DCT", pycvDCT, METH_VARARGS, "DCT(src, dst, flags) -> None"},
{"DFT", (PyCFunction)pycvDFT, METH_KEYWORDS, "DFT(src, dst, flags [, nonzeroRows]) -> None"},
{"DecodeImage", (PyCFunction)pycvDecodeImage, METH_KEYWORDS, "DecodeImage(buf [, iscolor]) -> IplImage*"},
{"DecodeImageM", (PyCFunction)pycvDecodeImageM, METH_KEYWORDS, "DecodeImageM(buf [, iscolor]) -> CvMat*"},
{"DecomposeProjectionMatrix", (PyCFunction)pycvDecomposeProjectionMatrix, METH_KEYWORDS, "DecomposeProjectionMatrix(projMatrix, cameraMatrix, rotMatrix, transVect [, rotMatrX [, rotMatrY [, rotMatrZ]]]) -> eulerAngles"},
{"DestroyAllWindows", pycvDestroyAllWindows, METH_VARARGS, "DestroyAllWindows() -> None"},
{"DestroyWindow", pycvDestroyWindow, METH_VARARGS, "DestroyWindow(name) -> None"},
{"Det", pycvDet, METH_VARARGS, "Det(mat) -> double"},
{"Dilate", (PyCFunction)pycvDilate, METH_KEYWORDS, "Dilate(src, dst [, element [, iterations]]) -> None"},
{"DistTransform", (PyCFunction)pycvDistTransform, METH_KEYWORDS, "DistTransform(src, dst [, distance_type [, mask_size [, mask [, labels]]]]) -> None"},
{"Div", (PyCFunction)pycvDiv, METH_KEYWORDS, "Div(src1, src2, dst [, scale]) -> None"},
{"DotProduct", pycvDotProduct, METH_VARARGS, "DotProduct(src1, src2) -> double"},
{"DrawChessboardCorners", pycvDrawChessboardCorners, METH_VARARGS, "DrawChessboardCorners(image, patternSize, corners, patternWasFound) -> None"},
{"DrawContours", (PyCFunction)pycvDrawContours, METH_KEYWORDS, "DrawContours(img, contour, external_color, hole_color, max_level [, thickness [, lineType [, offset]]]) -> None"},
{"EigenVV", (PyCFunction)pycvEigenVV, METH_KEYWORDS, "EigenVV(mat, evects, evals, eps [, lowindex [, highindex]]) -> None"},
{"Ellipse", (PyCFunction)pycvEllipse, METH_KEYWORDS, "Ellipse(img, center, axes, angle, start_angle, end_angle, color [, thickness [, lineType [, shift]]]) -> None"},
{"EllipseBox", (PyCFunction)pycvEllipseBox, METH_KEYWORDS, "EllipseBox(img, box, color [, thickness [, lineType [, shift]]]) -> None"},
{"EncodeImage", (PyCFunction)pycvEncodeImage, METH_KEYWORDS, "EncodeImage(ext, image [, params]) -> CvMat*"},
{"EqualizeHist", pycvEqualizeHist, METH_VARARGS, "EqualizeHist(src, dst) -> None"},
{"Erode", (PyCFunction)pycvErode, METH_KEYWORDS, "Erode(src, dst [, element [, iterations]]) -> None"},
{"EstimateRigidTransform", pycvEstimateRigidTransform, METH_VARARGS, "EstimateRigidTransform(A, B, M, full_affine) -> None"},
{"Exp", pycvExp, METH_VARARGS, "Exp(src, dst) -> None"},
{"ExtractSURF", pycvExtractSURF, METH_VARARGS, "ExtractSURF(image, mask, storage, params) -> keypoints,descriptors"},
{"FastArctan", pycvFastArctan, METH_VARARGS, "FastArctan(y, x) -> float"},
{"FillConvexPoly", (PyCFunction)pycvFillConvexPoly, METH_KEYWORDS, "FillConvexPoly(img, pn, color [, lineType [, shift]]) -> None"},
{"FillPoly", (PyCFunction)pycvFillPoly, METH_KEYWORDS, "FillPoly(img, polys, color [, lineType [, shift]]) -> None"},
{"Filter2D", (PyCFunction)pycvFilter2D, METH_KEYWORDS, "Filter2D(src, dst, kernel [, anchor]) -> None"},
{"FindChessboardCorners", (PyCFunction)pycvFindChessboardCorners, METH_KEYWORDS, "FindChessboardCorners(image, patternSize [, flags]) -> corners"},
{"FindContours", (PyCFunction)pycvFindContours, METH_KEYWORDS, "FindContours(image, storage [, mode [, method [, offset]]]) -> CvSeq"},
{"FindCornerSubPix", pycvFindCornerSubPix, METH_VARARGS, "FindCornerSubPix(image, corners, win, zero_zone, criteria) -> corners"},
{"FindExtrinsicCameraParams2", (PyCFunction)pycvFindExtrinsicCameraParams2, METH_KEYWORDS, "FindExtrinsicCameraParams2(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec [, useExtrinsicGuess]) -> None"},
{"FindFundamentalMat", (PyCFunction)pycvFindFundamentalMat, METH_KEYWORDS, "FindFundamentalMat(points1, points2, fundamentalMatrix [, method [, param1 [, param2 [, status]]]]) -> int"},
{"FindHomography", (PyCFunction)pycvFindHomography, METH_KEYWORDS, "FindHomography(srcPoints, dstPoints, H [, method [, ransacReprojThreshold [, status]]]) -> None"},
{"FindNearestPoint2D", pycvFindNearestPoint2D, METH_VARARGS, "FindNearestPoint2D(subdiv, pt) -> CvSubdiv2DPoint*"},
{"FindStereoCorrespondenceBM", pycvFindStereoCorrespondenceBM, METH_VARARGS, "FindStereoCorrespondenceBM(left, right, disparity, state) -> None"},
{"FindStereoCorrespondenceGC", (PyCFunction)pycvFindStereoCorrespondenceGC, METH_KEYWORDS, "FindStereoCorrespondenceGC(left, right, dispLeft, dispRight, state [, useDisparityGuess]) -> None"},
{"FitEllipse2", pycvFitEllipse2, METH_VARARGS, "FitEllipse2(points) -> CvBox2D"},
{"FitLine", pycvFitLine, METH_VARARGS, "FitLine(points, dist_type, param, reps, aeps) -> line"},
{"Flip", (PyCFunction)pycvFlip, METH_KEYWORDS, "Flip(src [, dst [, flipMode]]) -> None"},
{"FloodFill", (PyCFunction)pycvFloodFill, METH_KEYWORDS, "FloodFill(image, seed_point, new_val [, lo_diff [, up_diff [, flags [, mask]]]]) -> comp"},
{"Floor", pycvFloor, METH_VARARGS, "Floor(value) -> int"},
{"GEMM", (PyCFunction)pycvGEMM, METH_KEYWORDS, "GEMM(src1, src2, alpha, src3, beta, dst [, tABC]) -> None"},
{"Get1D", pycvGet1D, METH_VARARGS, "Get1D(arr, idx) -> CvScalar"},
{"Get2D", pycvGet2D, METH_VARARGS, "Get2D(arr, idx0, idx1) -> CvScalar"},
{"Get3D", pycvGet3D, METH_VARARGS, "Get3D(arr, idx0, idx1, idx2) -> CvScalar"},
{"GetAffineTransform", pycvGetAffineTransform, METH_VARARGS, "GetAffineTransform(src, dst, mapMatrix) -> None"},
{"GetCaptureProperty", pycvGetCaptureProperty, METH_VARARGS, "GetCaptureProperty(capture, property_id) -> double"},
{"GetCentralMoment", pycvGetCentralMoment, METH_VARARGS, "GetCentralMoment(moments, x_order, y_order) -> double"},
{"GetCol", pycvGetCol, METH_VARARGS, "GetCol(arr, col) -> submat"},
{"GetCols", pycvGetCols, METH_VARARGS, "GetCols(arr, startCol, endCol) -> submat"},
{"GetDiag", (PyCFunction)pycvGetDiag, METH_KEYWORDS, "GetDiag(arr [, diag]) -> submat"},
{"GetDims", pycvGetDims, METH_VARARGS, "GetDims(arr) -> dim1,dim2,..."},
{"GetElemType", pycvGetElemType, METH_VARARGS, "GetElemType(arr) -> int"},
{"GetHuMoments", pycvGetHuMoments, METH_VARARGS, "GetHuMoments(moments) -> hu"},
{"GetImage", pycvGetImage, METH_VARARGS, "GetImage(arr) -> iplimage"},
{"GetImageCOI", pycvGetImageCOI, METH_VARARGS, "GetImageCOI(image) -> int"},
{"GetImageROI", pycvGetImageROI, METH_VARARGS, "GetImageROI(image) -> CvRect"},
{"GetMat", (PyCFunction)pycvGetMat, METH_KEYWORDS, "GetMat(arr [, allowND]) -> CvMat"},
{"GetMinMaxHistValue", pycvGetMinMaxHistValue, METH_VARARGS, "GetMinMaxHistValue(hist) -> min_value,max_value,min_idx,max_idx"},
{"GetND", pycvGetND, METH_VARARGS, "GetND(arr, indices) -> CvScalar"},
{"GetNormalizedCentralMoment", pycvGetNormalizedCentralMoment, METH_VARARGS, "GetNormalizedCentralMoment(moments, x_order, y_order) -> double"},
{"GetOptimalDFTSize", pycvGetOptimalDFTSize, METH_VARARGS, "GetOptimalDFTSize(size0) -> int"},
{"GetOptimalNewCameraMatrix", (PyCFunction)pycvGetOptimalNewCameraMatrix, METH_KEYWORDS, "GetOptimalNewCameraMatrix(cameraMatrix, distCoeffs, imageSize, alpha, newCameraMatrix [, newImageSize [, validPixROI [, centerPrincipalPoint]]]) -> None"},
{"GetPerspectiveTransform", pycvGetPerspectiveTransform, METH_VARARGS, "GetPerspectiveTransform(src, dst, mapMatrix) -> None"},
{"GetQuadrangleSubPix", pycvGetQuadrangleSubPix, METH_VARARGS, "GetQuadrangleSubPix(src, dst, mapMatrix) -> None"},
{"GetReal1D", pycvGetReal1D, METH_VARARGS, "GetReal1D(arr, idx0) -> double"},
{"GetReal2D", pycvGetReal2D, METH_VARARGS, "GetReal2D(arr, idx0, idx1) -> double"},
{"GetReal3D", pycvGetReal3D, METH_VARARGS, "GetReal3D(arr, idx0, idx1, idx2) -> double"},
{"GetRealND", pycvGetRealND, METH_VARARGS, "GetRealND(arr, idx) -> double"},
{"GetRectSubPix", pycvGetRectSubPix, METH_VARARGS, "GetRectSubPix(src, dst, center) -> None"},
{"GetRotationMatrix2D", pycvGetRotationMatrix2D, METH_VARARGS, "GetRotationMatrix2D(center, angle, scale, mapMatrix) -> None"},
{"GetRow", pycvGetRow, METH_VARARGS, "GetRow(arr, row) -> submat"},
{"GetRows", (PyCFunction)pycvGetRows, METH_KEYWORDS, "GetRows(arr, startRow, endRow [, deltaRow]) -> submat"},
{"GetSize", pycvGetSize, METH_VARARGS, "GetSize(arr) -> CvSize"},
{"GetSpatialMoment", pycvGetSpatialMoment, METH_VARARGS, "GetSpatialMoment(moments, x_order, y_order) -> double"},
{"GetStarKeypoints", (PyCFunction)pycvGetStarKeypoints, METH_KEYWORDS, "GetStarKeypoints(image, storage [, params]) -> CvSeqOfCvStarKeypoint*"},
{"GetSubRect", pycvGetSubRect, METH_VARARGS, "GetSubRect(arr, rect) -> submat"},
{"GetTextSize", pycvGetTextSize, METH_VARARGS, "GetTextSize(textString, font) -> textSize,baseline"},
{"GetTickCount", pycvGetTickCount, METH_VARARGS, "GetTickCount() -> int64"},
{"GetTickFrequency", pycvGetTickFrequency, METH_VARARGS, "GetTickFrequency() -> int64"},
{"GetTrackbarPos", pycvGetTrackbarPos, METH_VARARGS, "GetTrackbarPos(trackbarName, windowName) -> int"},
{"GetWindowProperty", pycvGetWindowProperty, METH_VARARGS, "GetWindowProperty(name, prop_id) -> double"},
{"GoodFeaturesToTrack", (PyCFunction)pycvGoodFeaturesToTrack, METH_KEYWORDS, "GoodFeaturesToTrack(image, eigImage, tempImage, cornerCount, qualityLevel, minDistance [, mask [, blockSize [, useHarris [, k]]]]) -> cornerCount"},
{"GrabCut", pycvGrabCut, METH_VARARGS, "GrabCut(image, mask, rect, bgdModel, fgdModel, iterCount, mode) -> None"},
{"GrabFrame", pycvGrabFrame, METH_VARARGS, "GrabFrame(capture) -> int"},
{"HOGDetectMultiScale", (PyCFunction)pycvHOGDetectMultiScale, METH_KEYWORDS, "HOGDetectMultiScale(image, storage [, svm_classifier [, win_stride [, hit_threshold [, scale [, group_threshold [, padding [, win_size [, block_size [, block_stride [, cell_size [, nbins [, gammaCorrection]]]]]]]]]]]]) -> CvSeq*"},
{"HaarDetectObjects", (PyCFunction)pycvHaarDetectObjects, METH_KEYWORDS, "HaarDetectObjects(image, cascade, storage [, scale_factor [, min_neighbors [, flags [, min_size]]]]) -> CvSeqOfCvAvgComp*"},
{"HoughCircles", (PyCFunction)pycvHoughCircles, METH_KEYWORDS, "HoughCircles(image, circle_storage, method, dp, min_dist [, param1 [, param2 [, min_radius [, max_radius]]]]) -> None"},
{"HoughLines2", (PyCFunction)pycvHoughLines2, METH_KEYWORDS, "HoughLines2(image, storage, method, rho, theta, threshold [, param1 [, param2]]) -> CvSeq*"},
{"InRange", pycvInRange, METH_VARARGS, "InRange(src, lower, upper, dst) -> None"},
{"InRangeS", pycvInRangeS, METH_VARARGS, "InRangeS(src, lower, upper, dst) -> None"},
{"InitFont", (PyCFunction)pycvInitFont, METH_KEYWORDS, "InitFont(fontFace, hscale, vscale [, shear [, thickness [, lineType]]]) -> font"},
{"InitIntrinsicParams2D", (PyCFunction)pycvInitIntrinsicParams2D, METH_KEYWORDS, "InitIntrinsicParams2D(objectPoints, imagePoints, npoints, imageSize, cameraMatrix [, aspectRatio]) -> None"},
{"InitLineIterator", (PyCFunction)pycvInitLineIterator, METH_KEYWORDS, "InitLineIterator(image, pt1, pt2 [, connectivity [, left_to_right]]) -> line_iterator"},
{"InitUndistortMap", pycvInitUndistortMap, METH_VARARGS, "InitUndistortMap(cameraMatrix, distCoeffs, map1, map2) -> None"},
{"InitUndistortRectifyMap", pycvInitUndistortRectifyMap, METH_VARARGS, "InitUndistortRectifyMap(cameraMatrix, distCoeffs, R, newCameraMatrix, map1, map2) -> None"},
{"Inpaint", pycvInpaint, METH_VARARGS, "Inpaint(src, mask, dst, inpaintRadius, flags) -> None"},
{"Integral", (PyCFunction)pycvIntegral, METH_KEYWORDS, "Integral(image, sum [, sqsum [, tiltedSum]]) -> None"},
{"InvSqrt", pycvInvSqrt, METH_VARARGS, "InvSqrt(value) -> float"},
{"Invert", (PyCFunction)pycvInvert, METH_KEYWORDS, "Invert(src, dst [, method]) -> double"},
{"IsInf", pycvIsInf, METH_VARARGS, "IsInf(value) -> int"},
{"IsNaN", pycvIsNaN, METH_VARARGS, "IsNaN(value) -> int"},
{"KMeans2", (PyCFunction)pycvKMeans2, METH_KEYWORDS, "KMeans2(samples, nclusters, labels, termcrit [, attempts [, flags [, centers]]]) -> double"},
{"KalmanCorrect", pycvKalmanCorrect, METH_VARARGS, "KalmanCorrect(kalman, measurement) -> ROCvMat*"},
{"KalmanPredict", (PyCFunction)pycvKalmanPredict, METH_KEYWORDS, "KalmanPredict(kalman [, control]) -> ROCvMat*"},
{"LUT", pycvLUT, METH_VARARGS, "LUT(src, dst, lut) -> None"},
{"Laplace", (PyCFunction)pycvLaplace, METH_KEYWORDS, "Laplace(src, dst [, apertureSize]) -> None"},
{"Line", (PyCFunction)pycvLine, METH_KEYWORDS, "Line(img, pt1, pt2, color [, thickness [, lineType [, shift]]]) -> None"},
{"Load", (PyCFunction)pycvLoad, METH_KEYWORDS, "Load(filename [, storage [, name]]) -> generic"},
{"LoadImage", (PyCFunction)pycvLoadImage, METH_KEYWORDS, "LoadImage(filename [, iscolor]) -> None"},
{"LoadImageM", (PyCFunction)pycvLoadImageM, METH_KEYWORDS, "LoadImageM(filename [, iscolor]) -> None"},
{"Log", pycvLog, METH_VARARGS, "Log(src, dst) -> None"},
{"LogPolar", (PyCFunction)pycvLogPolar, METH_KEYWORDS, "LogPolar(src, dst, center, M [, flags]) -> None"},
{"Mahalonobis", pycvMahalonobis, METH_VARARGS, "Mahalonobis(vec1, vec2, mat) -> None"},
{"MatMul", pycvMatMul, METH_VARARGS, "MatMul(src1, src2, dst) -> None"},
{"MatMulAdd", pycvMatMulAdd, METH_VARARGS, "MatMulAdd(src1, src2, src3, dst) -> None"},
{"MatchShapes", (PyCFunction)pycvMatchShapes, METH_KEYWORDS, "MatchShapes(object1, object2, method [, parameter]) -> double"},
{"MatchTemplate", pycvMatchTemplate, METH_VARARGS, "MatchTemplate(image, templ, result, method) -> None"},
{"Max", pycvMax, METH_VARARGS, "Max(src1, src2, dst) -> None"},
{"MaxRect", pycvMaxRect, METH_VARARGS, "MaxRect(rect1, rect2) -> CvRect"},
{"MaxS", pycvMaxS, METH_VARARGS, "MaxS(src, value, dst) -> None"},
{"MeanShift", pycvMeanShift, METH_VARARGS, "MeanShift(prob_image, window, criteria) -> comp"},
{"Merge", pycvMerge, METH_VARARGS, "Merge(src0, src1, src2, src3, dst) -> None"},
{"Min", pycvMin, METH_VARARGS, "Min(src1, src2, dst) -> None"},
{"MinAreaRect2", (PyCFunction)pycvMinAreaRect2, METH_KEYWORDS, "MinAreaRect2(points [, storage]) -> CvBox2D"},
{"MinEnclosingCircle", pycvMinEnclosingCircle, METH_VARARGS, "MinEnclosingCircle(points) -> int,center,radius"},
{"MinMaxLoc", (PyCFunction)pycvMinMaxLoc, METH_KEYWORDS, "MinMaxLoc(arr [, mask]) -> minVal,maxVal,minLoc,maxLoc"},
{"MinS", pycvMinS, METH_VARARGS, "MinS(src, value, dst) -> None"},
{"MixChannels", pycvMixChannels, METH_VARARGS, "MixChannels(src, dst, fromTo) -> None"},
{"Moments", (PyCFunction)pycvMoments, METH_KEYWORDS, "Moments(arr [, binary]) -> moments"},
{"MorphologyEx", (PyCFunction)pycvMorphologyEx, METH_KEYWORDS, "MorphologyEx(src, dst, temp, element, operation [, iterations]) -> None"},
{"MoveWindow", pycvMoveWindow, METH_VARARGS, "MoveWindow(name, x, y) -> None"},
{"Mul", (PyCFunction)pycvMul, METH_KEYWORDS, "Mul(src1, src2, dst [, scale]) -> None"},
{"MulSpectrums", pycvMulSpectrums, METH_VARARGS, "MulSpectrums(src1, src2, dst, flags) -> None"},
{"MulTransposed", (PyCFunction)pycvMulTransposed, METH_KEYWORDS, "MulTransposed(src, dst, order [, delta [, scale]]) -> None"},
{"MultiplyAcc", (PyCFunction)pycvMultiplyAcc, METH_KEYWORDS, "MultiplyAcc(image1, image2, acc [, mask]) -> None"},
{"NamedWindow", (PyCFunction)pycvNamedWindow, METH_KEYWORDS, "NamedWindow(name [, flags]) -> None"},
{"Norm", (PyCFunction)pycvNorm, METH_KEYWORDS, "Norm(arr1, arr2 [, normType [, mask]]) -> double"},
{"Normalize", (PyCFunction)pycvNormalize, METH_KEYWORDS, "Normalize(src, dst [, a [, b [, norm_type [, mask]]]]) -> None"},
{"NormalizeHist", pycvNormalizeHist, METH_VARARGS, "NormalizeHist(hist, factor) -> None"},
{"Not", pycvNot, METH_VARARGS, "Not(src, dst) -> None"},
{"Or", (PyCFunction)pycvOr, METH_KEYWORDS, "Or(src1, src2, dst [, mask]) -> None"},
{"OrS", (PyCFunction)pycvOrS, METH_KEYWORDS, "OrS(src, value, dst [, mask]) -> None"},
{"POSIT", pycvPOSIT, METH_VARARGS, "POSIT(posit_object, imagePoints, focal_length, criteria) -> rotationMatrix,translation_vector"},
{"PerspectiveTransform", pycvPerspectiveTransform, METH_VARARGS, "PerspectiveTransform(src, dst, mat) -> None"},
{"PointPolygonTest", pycvPointPolygonTest, METH_VARARGS, "PointPolygonTest(contour, pt, measure_dist) -> double"},
{"PolarToCart", (PyCFunction)pycvPolarToCart, METH_KEYWORDS, "PolarToCart(magnitude, angle, x, y [, angleInDegrees]) -> None"},
{"PolyLine", (PyCFunction)pycvPolyLine, METH_KEYWORDS, "PolyLine(img, polys, is_closed, color [, thickness [, lineType [, shift]]]) -> None"},
{"Pow", pycvPow, METH_VARARGS, "Pow(src, dst, power) -> None"},
{"PreCornerDetect", (PyCFunction)pycvPreCornerDetect, METH_KEYWORDS, "PreCornerDetect(image, corners [, apertureSize]) -> None"},
{"ProjectPCA", pycvProjectPCA, METH_VARARGS, "ProjectPCA(data, avg, eigenvectors, result) -> None"},
{"ProjectPoints2", (PyCFunction)pycvProjectPoints2, METH_KEYWORDS, "ProjectPoints2(objectPoints, rvec, tvec, cameraMatrix, distCoeffs, imagePoints [, dpdrot [, dpdt [, dpdf [, dpdc [, dpddist]]]]]) -> None"},
{"PutText", pycvPutText, METH_VARARGS, "PutText(img, text, org, font, color) -> None"},
{"PyrDown", (PyCFunction)pycvPyrDown, METH_KEYWORDS, "PyrDown(src, dst [, filter]) -> None"},
{"PyrMeanShiftFiltering", (PyCFunction)pycvPyrMeanShiftFiltering, METH_KEYWORDS, "PyrMeanShiftFiltering(src, dst, sp, sr [, max_level [, termcrit]]) -> None"},
{"PyrSegmentation", pycvPyrSegmentation, METH_VARARGS, "PyrSegmentation(src, dst, storage, level, threshold1, threshold2) -> comp"},
{"PyrUp", (PyCFunction)pycvPyrUp, METH_KEYWORDS, "PyrUp(src, dst [, filter]) -> None"},
{"QueryFrame", pycvQueryFrame, METH_VARARGS, "QueryFrame(capture) -> ROIplImage*"},
{"QueryHistValue_1D", pycvQueryHistValue_1D, METH_VARARGS, "QueryHistValue_1D(hist, idx0) -> double"},
{"QueryHistValue_2D", pycvQueryHistValue_2D, METH_VARARGS, "QueryHistValue_2D(hist, idx0, idx1) -> double"},
{"QueryHistValue_3D", pycvQueryHistValue_3D, METH_VARARGS, "QueryHistValue_3D(hist, idx0, idx1, idx2) -> double"},
{"QueryHistValue_nD", pycvQueryHistValue_nD, METH_VARARGS, "QueryHistValue_nD(hist, idx) -> double"},
{"RNG", (PyCFunction)pycvRNG, METH_KEYWORDS, "RNG( [, seed]) -> CvRNG"},
{"RQDecomp3x3", (PyCFunction)pycvRQDecomp3x3, METH_KEYWORDS, "RQDecomp3x3(M, R, Q [, Qx [, Qy [, Qz]]]) -> eulerAngles"},
{"RandArr", pycvRandArr, METH_VARARGS, "RandArr(rng, arr, distType, param1, param2) -> None"},
{"RandInt", pycvRandInt, METH_VARARGS, "RandInt(rng) -> unsigned"},
{"RandReal", pycvRandReal, METH_VARARGS, "RandReal(rng) -> double"},
{"RandShuffle", (PyCFunction)pycvRandShuffle, METH_KEYWORDS, "RandShuffle(mat, rng [, iter_factor]) -> None"},
{"Range", pycvRange, METH_VARARGS, "Range(mat, start, end) -> None"},
{"RealScalar", pycvRealScalar, METH_VARARGS, "RealScalar(val0) -> CvScalar"},
{"Rectangle", (PyCFunction)pycvRectangle, METH_KEYWORDS, "Rectangle(img, pt1, pt2, color [, thickness [, lineType [, shift]]]) -> None"},
{"Reduce", (PyCFunction)pycvReduce, METH_KEYWORDS, "Reduce(src, dst [, dim [, op]]) -> None"},
{"Remap", (PyCFunction)pycvRemap, METH_KEYWORDS, "Remap(src, dst, mapx, mapy [, flags [, fillval]]) -> None"},
{"Repeat", pycvRepeat, METH_VARARGS, "Repeat(src, dst) -> None"},
{"ReprojectImageTo3D", (PyCFunction)pycvReprojectImageTo3D, METH_KEYWORDS, "ReprojectImageTo3D(disparity, _3dImage, Q [, handleMissingValues]) -> None"},
{"ResetImageROI", pycvResetImageROI, METH_VARARGS, "ResetImageROI(image) -> None"},
{"Reshape", (PyCFunction)pycvReshape, METH_KEYWORDS, "Reshape(arr, newCn [, newRows]) -> CvMat"},
{"ReshapeMatND", pycvReshapeMatND, METH_VARARGS, "ReshapeMatND(arr, newCn, newDims) -> CvMat"},
{"Resize", (PyCFunction)pycvResize, METH_KEYWORDS, "Resize(src, dst [, interpolation]) -> None"},
{"ResizeWindow", pycvResizeWindow, METH_VARARGS, "ResizeWindow(name, width, height) -> None"},
{"RetrieveFrame", (PyCFunction)pycvRetrieveFrame, METH_KEYWORDS, "RetrieveFrame(capture [, index]) -> ROIplImage*"},
{"Rodrigues2", (PyCFunction)pycvRodrigues2, METH_KEYWORDS, "Rodrigues2(src, dst [, jacobian]) -> None"},
{"Round", pycvRound, METH_VARARGS, "Round(value) -> int"},
{"RunningAvg", (PyCFunction)pycvRunningAvg, METH_KEYWORDS, "RunningAvg(image, acc, alpha [, mask]) -> None"},
{"SVBkSb", pycvSVBkSb, METH_VARARGS, "SVBkSb(W, U, V, B, X, flags) -> None"},
{"SVD", (PyCFunction)pycvSVD, METH_KEYWORDS, "SVD(A, W [, U [, V [, flags]]]) -> None"},
{"Save", (PyCFunction)pycvSave, METH_KEYWORDS, "Save(filename, structPtr [, name [, comment]]) -> None"},
{"SaveImage", pycvSaveImage, METH_VARARGS, "SaveImage(filename, image) -> None"},
{"Scalar", (PyCFunction)pycvScalar, METH_KEYWORDS, "Scalar(val0 [, val1 [, val2 [, val3]]]) -> CvScalar"},
{"ScalarAll", pycvScalarAll, METH_VARARGS, "ScalarAll(val0123) -> CvScalar"},
{"Scale", (PyCFunction)pycvScale, METH_KEYWORDS, "Scale(src, dst [, scale [, shift]]) -> None"},
{"ScaleAdd", pycvScaleAdd, METH_VARARGS, "ScaleAdd(src1, scale, src2, dst) -> None"},
{"SegmentMotion", pycvSegmentMotion, METH_VARARGS, "SegmentMotion(mhi, seg_mask, storage, timestamp, seg_thresh) -> CvSeq*"},
{"SeqInvert", pycvSeqInvert, METH_VARARGS, "SeqInvert(seq) -> None"},
{"SeqRemove", pycvSeqRemove, METH_VARARGS, "SeqRemove(seq, index) -> None"},
{"SeqRemoveSlice", pycvSeqRemoveSlice, METH_VARARGS, "SeqRemoveSlice(seq, slice) -> None"},
{"Set", (PyCFunction)pycvSet, METH_KEYWORDS, "Set(arr, value [, mask]) -> None"},
{"Set1D", pycvSet1D, METH_VARARGS, "Set1D(arr, idx, value) -> None"},
{"Set2D", pycvSet2D, METH_VARARGS, "Set2D(arr, idx0, idx1, value) -> None"},
{"Set3D", pycvSet3D, METH_VARARGS, "Set3D(arr, idx0, idx1, idx2, value) -> None"},
{"SetCaptureProperty", pycvSetCaptureProperty, METH_VARARGS, "SetCaptureProperty(capture, property_id, value) -> int"},
{"SetData", pycvSetData, METH_VARARGS, "SetData(arr, data, step) -> None"},
{"SetIdentity", (PyCFunction)pycvSetIdentity, METH_KEYWORDS, "SetIdentity(mat [, value]) -> None"},
{"SetImageCOI", pycvSetImageCOI, METH_VARARGS, "SetImageCOI(image, coi) -> None"},
{"SetImageROI", pycvSetImageROI, METH_VARARGS, "SetImageROI(image, rect) -> None"},
{"SetMouseCallback", (PyCFunction)pycvSetMouseCallback, METH_KEYWORDS, "SetMouseCallback(windowName, onMouse [, param]) -> None"},
{"SetND", pycvSetND, METH_VARARGS, "SetND(arr, indices, value) -> None"},
{"SetReal1D", pycvSetReal1D, METH_VARARGS, "SetReal1D(arr, idx, value) -> None"},
{"SetReal2D", pycvSetReal2D, METH_VARARGS, "SetReal2D(arr, idx0, idx1, value) -> None"},
{"SetReal3D", pycvSetReal3D, METH_VARARGS, "SetReal3D(arr, idx0, idx1, idx2, value) -> None"},
{"SetRealND", pycvSetRealND, METH_VARARGS, "SetRealND(arr, indices, value) -> None"},
{"SetTrackbarPos", pycvSetTrackbarPos, METH_VARARGS, "SetTrackbarPos(trackbarName, windowName, pos) -> None"},
{"SetWindowProperty", pycvSetWindowProperty, METH_VARARGS, "SetWindowProperty(name, prop_id, prop_value) -> None"},
{"SetZero", pycvSetZero, METH_VARARGS, "SetZero(arr) -> None"},
{"ShowImage", pycvShowImage, METH_VARARGS, "ShowImage(name, image) -> None"},
{"Smooth", (PyCFunction)pycvSmooth, METH_KEYWORDS, "Smooth(src, dst [, smoothtype [, param1 [, param2 [, param3 [, param4]]]]]) -> None"},
{"SnakeImage", (PyCFunction)pycvSnakeImage, METH_KEYWORDS, "SnakeImage(image, points, alpha, beta, gamma, win, criteria [, calc_gradient]) -> points"},
{"Sobel", (PyCFunction)pycvSobel, METH_KEYWORDS, "Sobel(src, dst, xorder, yorder [, apertureSize]) -> None"},
{"Solve", (PyCFunction)pycvSolve, METH_KEYWORDS, "Solve(A, B, X [, method]) -> None"},
{"SolveCubic", pycvSolveCubic, METH_VARARGS, "SolveCubic(coeffs, roots) -> None"},
{"SolvePoly", (PyCFunction)pycvSolvePoly, METH_KEYWORDS, "SolvePoly(coeffs, roots [, maxiter [, fig]]) -> None"},
{"Sort", (PyCFunction)pycvSort, METH_KEYWORDS, "Sort(src, dst, idxmat [, flags]) -> None"},
{"Split", pycvSplit, METH_VARARGS, "Split(src, dst0, dst1, dst2, dst3) -> None"},
{"Sqrt", pycvSqrt, METH_VARARGS, "Sqrt(value) -> float"},
{"SquareAcc", (PyCFunction)pycvSquareAcc, METH_KEYWORDS, "SquareAcc(image, sqsum [, mask]) -> None"},
{"StartWindowThread", pycvStartWindowThread, METH_VARARGS, "StartWindowThread() -> None"},
{"StereoCalibrate", (PyCFunction)pycvStereoCalibrate, METH_KEYWORDS, "StereoCalibrate(objectPoints, imagePoints1, imagePoints2, pointCounts, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T [, E [, F [, term_crit [, flags]]]]) -> None"},
{"StereoRectify", (PyCFunction)pycvStereoRectify, METH_KEYWORDS, "StereoRectify(cameraMatrix1, cameraMatrix2, distCoeffs1, distCoeffs2, imageSize, R, T, R1, R2, P1, P2 [, Q [, flags [, alpha [, newImageSize]]]]) -> roi1,roi2"},
{"StereoRectifyUncalibrated", (PyCFunction)pycvStereoRectifyUncalibrated, METH_KEYWORDS, "StereoRectifyUncalibrated(points1, points2, F, imageSize, H1, H2 [, threshold]) -> None"},
{"Sub", (PyCFunction)pycvSub, METH_KEYWORDS, "Sub(src1, src2, dst [, mask]) -> None"},
{"SubRS", (PyCFunction)pycvSubRS, METH_KEYWORDS, "SubRS(src, value, dst [, mask]) -> None"},
{"SubS", (PyCFunction)pycvSubS, METH_KEYWORDS, "SubS(src, value, dst [, mask]) -> None"},
{"Subdiv2DEdgeDst", pycvSubdiv2DEdgeDst, METH_VARARGS, "Subdiv2DEdgeDst(edge) -> CvSubdiv2DPoint*"},
{"Subdiv2DEdgeOrg", pycvSubdiv2DEdgeOrg, METH_VARARGS, "Subdiv2DEdgeOrg(edge) -> CvSubdiv2DPoint*"},
{"Subdiv2DGetEdge", pycvSubdiv2DGetEdge, METH_VARARGS, "Subdiv2DGetEdge(edge, type) -> CvSubdiv2DEdge"},
{"Subdiv2DLocate", pycvSubdiv2DLocate, METH_VARARGS, "Subdiv2DLocate(subdiv, pt) -> loc,where"},
{"Subdiv2DNextEdge", pycvSubdiv2DNextEdge, METH_VARARGS, "Subdiv2DNextEdge(edge) -> CvSubdiv2DEdge"},
{"Subdiv2DRotateEdge", pycvSubdiv2DRotateEdge, METH_VARARGS, "Subdiv2DRotateEdge(edge, rotate) -> CvSubdiv2DEdge"},
{"SubdivDelaunay2DInsert", pycvSubdivDelaunay2DInsert, METH_VARARGS, "SubdivDelaunay2DInsert(subdiv, pt) -> CvSubdiv2DPoint*"},
{"Sum", pycvSum, METH_VARARGS, "Sum(arr) -> CvScalar"},
{"ThreshHist", pycvThreshHist, METH_VARARGS, "ThreshHist(hist, threshold) -> None"},
{"Threshold", pycvThreshold, METH_VARARGS, "Threshold(src, dst, threshold, maxValue, thresholdType) -> None"},
{"Trace", pycvTrace, METH_VARARGS, "Trace(mat) -> CvScalar"},
{"Transform", (PyCFunction)pycvTransform, METH_KEYWORDS, "Transform(src, dst, transmat [, shiftvec]) -> None"},
{"Transpose", pycvTranspose, METH_VARARGS, "Transpose(src, dst) -> None"},
{"Undistort2", pycvUndistort2, METH_VARARGS, "Undistort2(src, dst, cameraMatrix, distCoeffs) -> None"},
{"UndistortPoints", (PyCFunction)pycvUndistortPoints, METH_KEYWORDS, "UndistortPoints(src, dst, cameraMatrix, distCoeffs [, R [, P]]) -> None"},
{"UpdateMotionHistory", pycvUpdateMotionHistory, METH_VARARGS, "UpdateMotionHistory(silhouette, mhi, timestamp, duration) -> None"},
{"WaitKey", (PyCFunction)pycvWaitKey, METH_KEYWORDS, "WaitKey( [, delay]) -> int"},
{"WarpAffine", (PyCFunction)pycvWarpAffine, METH_KEYWORDS, "WarpAffine(src, dst, mapMatrix [, flags [, fillval]]) -> None"},
{"WarpPerspective", (PyCFunction)pycvWarpPerspective, METH_KEYWORDS, "WarpPerspective(src, dst, mapMatrix [, flags [, fillval]]) -> None"},
{"Watershed", pycvWatershed, METH_VARARGS, "Watershed(image, markers) -> None"},
{"WriteFrame", pycvWriteFrame, METH_VARARGS, "WriteFrame(writer, image) -> int"},
{"Xor", (PyCFunction)pycvXor, METH_KEYWORDS, "Xor(src1, src2, dst [, mask]) -> None"},
{"XorS", (PyCFunction)pycvXorS, METH_KEYWORDS, "XorS(src, value, dst [, mask]) -> None"},
{"Zero", pycvZero, METH_VARARGS, "Zero(arr) -> None"},
{"mGet", pycvmGet, METH_VARARGS, "mGet(mat, row, col) -> double"},
{"mSet", pycvmSet, METH_VARARGS, "mSet(mat, row, col, value) -> None"},
