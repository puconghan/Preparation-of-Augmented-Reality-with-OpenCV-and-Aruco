PORTED FUNCs LIST (122 of 127):

 void LUT(Mat src, Mat lut, Mat& dst, int interpolation = 0)
 double Mahalanobis(Mat v1, Mat v2, Mat icovar)
 void PCABackProject(Mat data, Mat mean, Mat eigenvectors, Mat& result)
 void PCACompute(Mat data, Mat& mean, Mat& eigenvectors, int maxComponents = 0)
 void PCAComputeVar(Mat data, Mat& mean, Mat& eigenvectors, double retainedVariance)
 void PCAProject(Mat data, Mat mean, Mat eigenvectors, Mat& result)
 void SVBackSubst(Mat w, Mat u, Mat vt, Mat rhs, Mat& dst)
 void SVDecomp(Mat src, Mat& w, Mat& u, Mat& vt, int flags = 0)
 void absdiff(Mat src1, Mat src2, Mat& dst)
 void absdiff(Mat src1, Scalar src2, Mat& dst)
 void add(Mat src1, Mat src2, Mat& dst, Mat mask = Mat(), int dtype = -1)
 void add(Mat src1, Scalar src2, Mat& dst, Mat mask = Mat(), int dtype = -1)
 void addWeighted(Mat src1, double alpha, Mat src2, double beta, double gamma, Mat& dst, int dtype = -1)
 void batchDistance(Mat src1, Mat src2, Mat& dist, int dtype, Mat& nidx, int normType = NORM_L2, int K = 0, Mat mask = Mat(), int update = 0, bool crosscheck = false)
 void bitwise_and(Mat src1, Mat src2, Mat& dst, Mat mask = Mat())
 void bitwise_not(Mat src, Mat& dst, Mat mask = Mat())
 void bitwise_or(Mat src1, Mat src2, Mat& dst, Mat mask = Mat())
 void bitwise_xor(Mat src1, Mat src2, Mat& dst, Mat mask = Mat())
 void calcCovarMatrix(Mat samples, Mat& covar, Mat& mean, int flags, int ctype = CV_64F)
 void cartToPolar(Mat x, Mat y, Mat& magnitude, Mat& angle, bool angleInDegrees = false)
 bool checkRange(Mat a, bool quiet = true,  _hidden_ * pos = 0, double minVal = -DBL_MAX, double maxVal = DBL_MAX)
 void circle(Mat& img, Point center, int radius, Scalar color, int thickness = 1, int lineType = 8, int shift = 0)
 bool clipLine(Rect imgRect, Point& pt1, Point& pt2)
 void compare(Mat src1, Mat src2, Mat& dst, int cmpop)
 void compare(Mat src1, Scalar src2, Mat& dst, int cmpop)
 void completeSymm(Mat& mtx, bool lowerToUpper = false)
 void convertScaleAbs(Mat src, Mat& dst, double alpha = 1, double beta = 0)
 int countNonZero(Mat src)
 float cubeRoot(float val)
 void dct(Mat src, Mat& dst, int flags = 0)
 double determinant(Mat mtx)
 void dft(Mat src, Mat& dst, int flags = 0, int nonzeroRows = 0)
 void divide(Mat src1, Mat src2, Mat& dst, double scale = 1, int dtype = -1)
 void divide(double scale, Mat src2, Mat& dst, int dtype = -1)
 void divide(Mat src1, Scalar src2, Mat& dst, double scale = 1, int dtype = -1)
 bool eigen(Mat src, bool computeEigenvectors, Mat& eigenvalues, Mat& eigenvectors)
 void ellipse(Mat& img, Point center, Size axes, double angle, double startAngle, double endAngle, Scalar color, int thickness = 1, int lineType = 8, int shift = 0)
 void ellipse(Mat& img, RotatedRect box, Scalar color, int thickness = 1, int lineType = 8)
 void ellipse2Poly(Point center, Size axes, int angle, int arcStart, int arcEnd, int delta, vector_Point& pts)
 void exp(Mat src, Mat& dst)
 void extractChannel(Mat src, Mat& dst, int coi)
 float fastAtan2(float y, float x)
 void fillConvexPoly(Mat& img, vector_Point points, Scalar color, int lineType = 8, int shift = 0)
 void fillPoly(Mat& img, vector_vector_Point pts, Scalar color, int lineType = 8, int shift = 0, Point offset = Point())
 void findNonZero(Mat src, Mat& idx)
 void flip(Mat src, Mat& dst, int flipCode)
 void gemm(Mat src1, Mat src2, double alpha, Mat src3, double gamma, Mat& dst, int flags = 0)
 string getBuildInformation()
 int64 getCPUTickCount()
 int getNumberOfCPUs()
 int getOptimalDFTSize(int vecsize)
 int64 getTickCount()
 double getTickFrequency()
 void hconcat(vector_Mat src, Mat& dst)
 void idct(Mat src, Mat& dst, int flags = 0)
 void idft(Mat src, Mat& dst, int flags = 0, int nonzeroRows = 0)
 void inRange(Mat src, Scalar lowerb, Scalar upperb, Mat& dst)
 void insertChannel(Mat src, Mat& dst, int coi)
 double invert(Mat src, Mat& dst, int flags = DECOMP_LU)
 double kmeans(Mat data, int K, Mat& bestLabels, TermCriteria criteria, int attempts, int flags, Mat& centers = Mat())
 void line(Mat& img, Point pt1, Point pt2, Scalar color, int thickness = 1, int lineType = 8, int shift = 0)
 void log(Mat src, Mat& dst)
 void magnitude(Mat x, Mat y, Mat& magnitude)
 void max(Mat src1, Mat src2, Mat& dst)
 void max(Mat src1, Scalar src2, Mat& dst)
 Scalar mean(Mat src, Mat mask = Mat())
 void meanStdDev(Mat src, vector_double& mean, vector_double& stddev, Mat mask = Mat())
 void merge(vector_Mat mv, Mat& dst)
 void min(Mat src1, Mat src2, Mat& dst)
 void min(Mat src1, Scalar src2, Mat& dst)
 void mixChannels(vector_Mat src, vector_Mat dst, vector_int fromTo)
 void mulSpectrums(Mat a, Mat b, Mat& c, int flags, bool conjB = false)
 void mulTransposed(Mat src, Mat& dst, bool aTa, Mat delta = Mat(), double scale = 1, int dtype = -1)
 void multiply(Mat src1, Mat src2, Mat& dst, double scale = 1, int dtype = -1)
 void multiply(Mat src1, Scalar src2, Mat& dst, double scale = 1, int dtype = -1)
 double norm(Mat src1, int normType = NORM_L2, Mat mask = Mat())
 double norm(Mat src1, Mat src2, int normType = NORM_L2, Mat mask = Mat())
 void normalize(Mat src, Mat& dst, double alpha = 1, double beta = 0, int norm_type = NORM_L2, int dtype = -1, Mat mask = Mat())
 void patchNaNs(Mat& a, double val = 0)
 void perspectiveTransform(Mat src, Mat& dst, Mat m)
 void phase(Mat x, Mat y, Mat& angle, bool angleInDegrees = false)
 void polarToCart(Mat magnitude, Mat angle, Mat& x, Mat& y, bool angleInDegrees = false)
 void polylines(Mat& img, vector_vector_Point pts, bool isClosed, Scalar color, int thickness = 1, int lineType = 8, int shift = 0)
 void pow(Mat src, double power, Mat& dst)
 void putText(Mat img, string text, Point org, int fontFace, double fontScale, Scalar color, int thickness = 1, int lineType = 8, bool bottomLeftOrigin = false)
 void randShuffle_(Mat& dst, double iterFactor = 1.)
 void randn(Mat& dst, double mean, double stddev)
 void randu(Mat& dst, double low, double high)
 void rectangle(Mat& img, Point pt1, Point pt2, Scalar color, int thickness = 1, int lineType = 8, int shift = 0)
 void reduce(Mat src, Mat& dst, int dim, int rtype, int dtype = -1)
 void repeat(Mat src, int ny, int nx, Mat& dst)
 void scaleAdd(Mat src1, double alpha, Mat src2, Mat& dst)
 void setErrorVerbosity(bool verbose)
 void setIdentity(Mat& mtx, Scalar s = Scalar(1))
 bool solve(Mat src1, Mat src2, Mat& dst, int flags = DECOMP_LU)
 int solveCubic(Mat coeffs, Mat& roots)
 double solvePoly(Mat coeffs, Mat& roots, int maxIters = 300)
 void sort(Mat src, Mat& dst, int flags)
 void sortIdx(Mat src, Mat& dst, int flags)
 void split(Mat m, vector_Mat& mv)
 void sqrt(Mat src, Mat& dst)
 void subtract(Mat src1, Mat src2, Mat& dst, Mat mask = Mat(), int dtype = -1)
 void subtract(Mat src1, Scalar src2, Mat& dst, Mat mask = Mat(), int dtype = -1)
 Scalar sum(Mat src)
 Scalar trace(Mat mtx)
 void transform(Mat src, Mat& dst, Mat m)
 void transpose(Mat src, Mat& dst)
 void vconcat(vector_Mat src, Mat& dst)
 bool Algorithm::getBool(string name)
 double Algorithm::getDouble(string name)
 int Algorithm::getInt(string name)
 Mat Algorithm::getMat(string name)
 vector_Mat Algorithm::getMatVector(string name)
 string Algorithm::getString(string name)
 string Algorithm::paramHelp(string name)
 int Algorithm::paramType(string name)
 void Algorithm::setBool(string name, bool value)
 void Algorithm::setDouble(string name, double value)
 void Algorithm::setInt(string name, int value)
 void Algorithm::setMat(string name, Mat value)
 void Algorithm::setMatVector(string name, vector_Mat value)
 void Algorithm::setString(string name, string value)

SKIPPED FUNCs LIST (5 of 127):

static Ptr_Algorithm Algorithm::_create(string name)
// Return type 'Ptr_Algorithm' is not supported, skipping the function

 Ptr_Algorithm Algorithm::getAlgorithm(string name)
// Return type 'Ptr_Algorithm' is not supported, skipping the function

static void Algorithm::getList(vector_string& algorithms)
// Unknown type 'vector_string' (O), skipping the function

 void Algorithm::getParams(vector_string& names)
// Unknown type 'vector_string' (O), skipping the function

 void Algorithm::setAlgorithm(string name, Ptr_Algorithm value)
// Unknown type 'Ptr_Algorithm' (I), skipping the function


0 def args - 73 funcs
1 def args - 28 funcs
2 def args - 15 funcs
3 def args - 8 funcs
4 def args - 1 funcs
5 def args - 2 funcs

class as MAP:
	

class SIMPLE:
	